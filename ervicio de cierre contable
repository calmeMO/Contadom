[1mdiff --git a/src/services/closingService.ts b/src/services/closingService.ts[m
[1mindex 1d99625..93dd06a 100644[m
[1m--- a/src/services/closingService.ts[m
[1m+++ b/src/services/closingService.ts[m
[36m@@ -391,30 +391,120 @@[m [mexport async function createNextPeriod(currentPeriodId: string, userId: string)[m
     startDate.setDate(startDate.getDate() + 1);[m
     [m
     const endDate = new Date(startDate);[m
[32m+[m[41m    [m
     // Si es per√≠odo mensual[m
     if (currentPeriod.period_type === 'monthly') {[m
       endDate.setMonth(endDate.getMonth() + 1);[m
       endDate.setDate(0); // √öltimo d√≠a del mes[m
     } else {[m
[31m-      // Si es per√≠odo anual[m
[31m-      endDate.setFullYear(endDate.getFullYear() + 1);[m
[31m-      endDate.setDate(endDate.getDate() - 1);[m
[32m+[m[32m      // Si es per√≠odo anual, considerar el tipo de a√±o fiscal[m
[32m+[m[32m      const fiscalYearType = currentPeriod.fiscal_year_type || 'calendar';[m
[32m+[m[41m      [m
[32m+[m[32m      switch (fiscalYearType) {[m
[32m+[m[32m        case 'calendar': // Enero a Diciembre[m
[32m+[m[32m          // Si estamos en diciembre, el siguiente a√±o fiscal comienza en enero[m
[32m+[m[32m          if (startDate.getMonth() === 0) { // Enero (0-indexed)[m
[32m+[m[32m            endDate.setMonth(11); // Diciembre[m
[32m+[m[32m            endDate.setDate(31);[m
[32m+[m[32m          } else {[m
[32m+[m[32m            endDate.setFullYear(endDate.getFullYear() + 1);[m
[32m+[m[32m            endDate.setMonth(startDate.getMonth() - 1);[m
[32m+[m[32m            endDate.setDate(startDate.getDate() - 1);[m
[32m+[m[32m          }[m
[32m+[m[32m          break;[m
[32m+[m[41m          [m
[32m+[m[32m        case 'fiscal_mar': // Abril a Marzo[m
[32m+[m[32m          // Si estamos en marzo, el siguiente a√±o fiscal comienza en abril[m
[32m+[m[32m          if (startDate.getMonth() === 3) { // Abril (0-indexed)[m
[32m+[m[32m            endDate.setFullYear(endDate.getFullYear() + 1);[m
[32m+[m[32m            endDate.setMonth(2); // Marzo[m
[32m+[m[32m            endDate.setDate(31);[m
[32m+[m[32m          } else {[m
[32m+[m[32m            endDate.setFullYear(endDate.getFullYear() + 1);[m
[32m+[m[32m            endDate.setMonth(startDate.getMonth() - 1);[m
[32m+[m[32m            endDate.setDate(startDate.getDate() - 1);[m
[32m+[m[32m          }[m
[32m+[m[32m          break;[m
[32m+[m[41m          [m
[32m+[m[32m        case 'fiscal_jun': // Julio a Junio[m
[32m+[m[32m          // Si estamos en julio, el siguiente a√±o fiscal comienza en julio[m
[32m+[m[32m          if (startDate.getMonth() === 6) { // Julio (0-indexed)[m
[32m+[m[32m            endDate.setFullYear(endDate.getFullYear() + 1);[m
[32m+[m[32m            endDate.setMonth(5); // Junio[m
[32m+[m[32m            endDate.setDate(30);[m
[32m+[m[32m          } else {[m
[32m+[m[32m            endDate.setFullYear(endDate.getFullYear() + 1);[m
[32m+[m[32m            endDate.setMonth(startDate.getMonth() - 1);[m
[32m+[m[32m            endDate.setDate(startDate.getDate() - 1);[m
[32m+[m[32m          }[m
[32m+[m[32m          break;[m
[32m+[m[41m          [m
[32m+[m[32m        case 'fiscal_sep': // Octubre a Septiembre[m
[32m+[m[32m          // Si estamos en octubre, el siguiente a√±o fiscal comienza en octubre[m
[32m+[m[32m          if (startDate.getMonth() === 9) { // Octubre (0-indexed)[m
[32m+[m[32m            endDate.setFullYear(endDate.getFullYear() + 1);[m
[32m+[m[32m            endDate.setMonth(8); // Septiembre[m
[32m+[m[32m            endDate.setDate(30);[m
[32m+[m[32m          } else {[m
[32m+[m[32m            endDate.setFullYear(endDate.getFullYear() + 1);[m
[32m+[m[32m            endDate.setMonth(startDate.getMonth() - 1);[m
[32m+[m[32m            endDate.setDate(startDate.getDate() - 1);[m
[32m+[m[32m          }[m
[32m+[m[32m          break;[m
[32m+[m[41m          [m
[32m+[m[32m        default:[m
[32m+[m[32m          // Por defecto, a√±o normal[m
[32m+[m[32m          endDate.setFullYear(endDate.getFullYear() + 1);[m
[32m+[m[32m          endDate.setDate(endDate.getDate() - 1);[m
[32m+[m[32m      }[m
     }[m
     [m
     // Formatear fechas como strings YYYY-MM-DD[m
     const startDateStr = startDate.toISOString().split('T')[0];[m
     const endDateStr = endDate.toISOString().split('T')[0];[m
     [m
[32m+[m[32m    // Generar nombre adecuado seg√∫n el tipo de per√≠odo y a√±o fiscal[m
[32m+[m[32m    let periodName = '';[m
[32m+[m[41m    [m
[32m+[m[32m    if (currentPeriod.period_type === 'monthly') {[m
[32m+[m[32m      // Para per√≠odos mensuales, usar a√±o-mes[m
[32m+[m[32m      periodName = `Per√≠odo ${startDate.getFullYear()}-${String(startDate.getMonth() + 1).padStart(2, '0')}`;[m
[32m+[m[32m    } else {[m
[32m+[m[32m      // Para a√±os fiscales, incluir el rango de fechas[m
[32m+[m[32m      const startYear = startDate.getFullYear();[m
[32m+[m[32m      const endYear = endDate.getFullYear();[m
[32m+[m[41m      [m
[32m+[m[32m      const fiscalYearType = currentPeriod.fiscal_year_type || 'calendar';[m
[32m+[m[41m      [m
[32m+[m[32m      switch (fiscalYearType) {[m
[32m+[m[32m        case 'calendar':[m
[32m+[m[32m          periodName = `A√±o Fiscal ${startYear}`;[m
[32m+[m[32m          break;[m
[32m+[m[32m        case 'fiscal_mar':[m
[32m+[m[32m          periodName = `A√±o Fiscal Abr ${startYear} - Mar ${endYear}`;[m
[32m+[m[32m          break;[m
[32m+[m[32m        case 'fiscal_jun':[m
[32m+[m[32m          periodName = `A√±o Fiscal Jul ${startYear} - Jun ${endYear}`;[m
[32m+[m[32m          break;[m
[32m+[m[32m        case 'fiscal_sep':[m
[32m+[m[32m          periodName = `A√±o Fiscal Oct ${startYear} - Sep ${endYear}`;[m
[32m+[m[32m          break;[m
[32m+[m[32m        default:[m
[32m+[m[32m          periodName = `A√±o Fiscal ${startYear}-${endYear}`;[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
     // Crear nuevo per√≠odo[m
     const { data: newPeriod, error: newPeriodError } = await supabase[m
       .from('accounting_periods')[m
       .insert({[m
[31m-        name: `Per√≠odo ${startDate.getFullYear()}-${String(startDate.getMonth() + 1).padStart(2, '0')}`,[m
[32m+[m[32m        name: periodName,[m
         start_date: startDateStr,[m
         end_date: endDateStr,[m
         is_active: true,[m
         is_closed: false,[m
         period_type: currentPeriod.period_type,[m
[32m+[m[32m        fiscal_year_type: currentPeriod.fiscal_year_type,[m
         fiscal_year_id: currentPeriod.fiscal_year_id,[m
         created_by: userId[m
       })[m
